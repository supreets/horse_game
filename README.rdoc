== README

This README would normally document whatever steps are necessary to get the
application up and running.
There is a horse that needs to cover a distance from point A to point B. It needs to transport some bundles of hay across these
two points. The condition is that the horse consumes some number of bundles per km it travels and it can only carry a fixed
number of bundles at one time. What is the maximum number of bundles that can be transported from point A to point B?

Example:
3000 - Total number of bundles inititally at point A
1000 - Distance in km between point A and B 
1 - Number of bundles the horse eats per km
1000 - Maximum Number of bundles the horse can carry at one time

Explanation about create method

def create
    #total number of bundles
    bundles = params[:bundles].to_i  
    #total distance to be covered
    distance = params[:distance].to_i 
    #bundles consumed per km by horse
    bundlesperkm = params[:bundlesperkm].to_i 
    #bundles that can be taken by horse per ride
    bundlesperride = params[:bundlesperride].to_i  
    
    d = 0
    while d < distance
     #bundles exhausted before completing distance
     if bundles <= 0 
       break;
     end
     #l is the number of bundles consumed per km travelled
     l = (((bundles/bundlesperride)*2 -1) * bundlesperkm) 
     #distance remaining to cover
     distanceleft = distance - d  
     #if bundles remaining at previous point are lesser
     #than it would take to move them from that spot to 
     #new one,leave them there
     if bundles % bundlesperride <= (2*bundlesperkm) 
      bundles -= (bundles % bundlesperride)
     end
     #kilometers that can be travelled by consuming l bundles every km
     kilometerspossible = bundlesperride/l  
     #in last iteration, check if distance remaining<kilometerspossible
     d1 = distanceleft < kilometerspossible ? distanceleft : kilometerspossible 
     d += d1
     bundles -= (d1 * l)
    end
   
     @result = bundles>0 ? bundles : "bundles exhausted before completing distance"
    end
